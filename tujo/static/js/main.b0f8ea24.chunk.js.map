{"version":3,"sources":["set-wasm-path.js","PrivateRoute.js","TupeloLoader.js","AppBar.js","Header.js","NewPost.js","Day.js","Entries.js","Settings.js","Login.js","App.js","serviceWorker.js","index.js","../node_modules/tupelo-wasm-sdk/lib/js/go sync","db.js","tupelo.js"],"names":["window","Go","setWasmPath","PrivateRoute","isAuthenticated","children","rest","render","location","to","pathname","state","from","TupeloLoader","props","username","useParams","useState","tupelo","setTupelo","useEffect","a","usernameToDid","did","console","log","Tupelo","fromDID","then","fromKey","loadTupelo","elements","React","Children","toArray","map","child","cloneElement","undefined","AppBar","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","Text","Button","label","Header","name","setName","get","Heading","level","NewPost","onSubmit","value","db","post","setPost","e","preventDefault","set","intervalId","setInterval","clearInterval","bottom","margin","Form","TextArea","fill","placeholder","onChange","target","icon","FormAdd","type","Day","date","path","edit","setEdit","posts","setPosts","Date","toISOString","split","today","time","join","now","slice","getPosts","sortedPosts","keys","Object","sort","reverse","forEach","k","key","Layer","onEsc","onClickOutside","onSubmitEdit","entries","border","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","marked","Menu","size","items","onClick","onEdit","onDelete","Entries","setEntries","includes","getEntries","entry","EXPLORER","Settings","setDid","tree","id","top","href","remove","reload","Login","onLogin","history","useHistory","isWrongPassword","setIsWrongPassword","setUsername","password","setPassword","login","replace","toString","Paragraph","FormField","TextInput","theme","global","font","family","height","App","loading","setLoading","loadWasm","getKey","privateKey","Grommet","full","width","exact","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","webpackEmptyContext","req","Error","code","resolve","module","exports","DB","storage","localStorage","this","fallback","getItem","JSON","parse","valueOrFunction","Function","setItem","stringify","removeItem","Community","ChainTree","EcdsaKey","setDataTransaction","NAMESPACE","sha256","s","msgUint8","Buffer","crypto","subtle","digest","hashBuffer","Uint8Array","getDefault","community","claimHash","fromBytes","claimKey","ecdsaPubkeyToDid","publicKey","claimDid","getTip","claimTip","currentClaim","store","blockservice","tip","generate","userHash","userKey","ecdsaPubkeyToAddress","userAddress","userDid","currentOwner","newEmptyTree","claimTree","playTransactions","setOwnershipTransaction","userTree","Array","has","Store","remaining","init","emptyTree"],"mappings":"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","file":"static/js/main.b0f8ea24.chunk.js","sourcesContent":["// in order to get the Go global\nimport \"tupelo-wasm-sdk\";\nwindow.Go.setWasmPath(\"./tupelo.wasm\");\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default function PrivateRoute({ isAuthenticated, children, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\",\n              state: { from: location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Tupelo, { usernameToDid } from \"./tupelo.js\";\n\nfunction TupeloLoader(props) {\n  const { username } = useParams();\n  const [tupelo, setTupelo] = useState();\n\n  useEffect(() => {\n    async function loadTupelo() {\n      const did = await usernameToDid(username);\n      console.log(did);\n      if (did) {\n        Tupelo.fromDID(did).then(setTupelo);\n      } else {\n        Tupelo.fromKey().then(setTupelo);\n      }\n    }\n    loadTupelo();\n  }, [username]);\n\n  let elements = React.Children.toArray(props.children).map(child =>\n    React.cloneElement(child, { tupelo })\n  );\n\n  if (tupelo === undefined) {\n    return <p>Loading ChainTree, please wait...</p>;\n  }\n  return elements;\n}\n\nexport default TupeloLoader;\n","import React, { useState, useEffect } from \"react\";\nimport { Box, Button, Text } from \"grommet\";\nimport { Link } from \"react-router-dom\";\n\nconst AppBar = props => (\n  <Box\n    tag=\"header\"\n    direction=\"row\"\n    align=\"center\"\n    justify=\"between\"\n    background=\"brand\"\n    pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n    elevation=\"medium\"\n    style={{ zIndex: \"1\" }}\n    {...props}\n  >\n    <Text>tujo</Text>\n    <Link to=\"/\">\n      <Button label=\"Home\" />\n    </Link>\n    <Link to=\"/settings\">\n      <Button label=\"Settings\" />\n    </Link>\n  </Box>\n);\n\nexport default AppBar;\n","import React, { useState, useEffect } from \"react\";\nimport { Heading } from \"grommet\";\nimport Editable from \"./Editable\";\n\nfunction Header({ tupelo }) {\n  const [name, setName] = useState(\"Unknown\");\n\n  useEffect(() => {\n    console.log(\"header\", tupelo);\n    tupelo.get(\"username\").then(setName);\n  }, [tupelo]);\n\n  return <Heading level={1}>{name}'s Journal</Heading>;\n}\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport { Box, Button, Form, Icons, FormField, TextArea } from \"grommet\";\nimport { FormAdd } from \"grommet-icons\";\nimport db from \"./db\";\n\nfunction NewPost({ onSubmit, value }) {\n  const [post, setPost] = useState(value || db.get(\"post\", \"\"));\n\n  async function _onSubmit(e) {\n    e.preventDefault();\n    if (await onSubmit(post)) {\n      return;\n    }\n    setPost(\"\");\n    db.set(\"post\", \"\");\n  }\n\n  // It's pretty annoying if you wrote some text and accidentally close\n  // the page.\n  useEffect(() => {\n    const intervalId = window.setInterval(() => {\n      db.set(\"post\", post);\n    }, 1000);\n\n    return () => clearInterval(intervalId);\n  }, [post]);\n\n  return (\n    <Box pad={{ bottom: \"medium\" }} margin={{ bottom: \"medium\" }}>\n      <Form onSubmit={_onSubmit}>\n        <TextArea\n          fill\n          placeholder=\"Describe your activity. You can use **Markdown**!\"\n          value={post}\n          onChange={e => setPost(e.target.value)}\n        />\n        <Button icon={<FormAdd />} type=\"submit\" label=\"Submit\" />\n      </Form>\n    </Box>\n  );\n}\n\nexport default NewPost;\n","import React, { useState, useEffect } from \"react\";\nimport { Box, Heading, Layer, Markdown, Menu } from \"grommet\";\nimport NewPost from \"./NewPost\";\nimport marked from \"marked\";\nimport DOMPurify from \"dompurify\";\n\nfunction Day({ tupelo, date, path }) {\n  const [edit, setEdit] = useState(false);\n  const [posts, setPosts] = useState({});\n  const [today] = new Date().toISOString().split(\"T\");\n\n  async function onSubmit(post, date, time) {\n    const resp = await tupelo.set([\"entries\", date, time].join(\"/\"), post);\n    posts[time] = post;\n    setPosts({ ...posts });\n  }\n\n  async function onSubmitNew(post) {\n    const now = new Date().toISOString();\n    let [date, time] = now.split(\"T\");\n    // Remove the Z timezone\n    time = time.slice(0, -1);\n    return onSubmit(post, date, time);\n  }\n\n  async function onSubmitEdit(post, time) {\n    await onSubmit(post, date, time);\n    setEdit(\"\");\n    return true;\n  }\n\n  async function onEdit(time) {\n    setEdit(time);\n  }\n\n  async function onDelete(time) {\n    const resp = await tupelo.set([\"entries\", date, time].join(\"/\"), \"\");\n    delete posts[time];\n    setPosts({ ...posts });\n  }\n\n  useEffect(() => {\n    async function getPosts() {\n      const posts = await tupelo.get(path, {});\n      setPosts(posts);\n    }\n    getPosts();\n  }, [tupelo, path]);\n\n  const sortedPosts = {};\n  const keys = Object.keys(posts);\n  keys.sort();\n  keys.reverse();\n  //                NOTHING TO SEE HERE PLEASE DISPERSE\n  keys.forEach(k => posts[k] !== \"\" && (sortedPosts[k] = posts[k]));\n\n  return (\n    <Box>\n      <Heading level={2}>{date}</Heading>\n      {today === date && tupelo.key && <NewPost onSubmit={onSubmitNew} />}\n      {edit && (\n        <Layer\n          onEsc={() => setEdit(false)}\n          onClickOutside={() => setEdit(false)}\n        >\n          <Box pad=\"large\">\n            <NewPost\n              value={posts[edit]}\n              onSubmit={post => onSubmitEdit(post, edit)}\n            />\n          </Box>\n        </Layer>\n      )}\n      {Object.entries(sortedPosts).map(([time, post]) => (\n        <Box\n          fill\n          border=\"left\"\n          pad={{ left: \"small\" }}\n          margin=\"small\"\n          key={time}\n        >\n          <div\n            dangerouslySetInnerHTML={{\n              __html: DOMPurify.sanitize(marked(post))\n            }}\n          />\n          {tupelo.key && (\n            <Box>\n              <Menu\n                size=\"small\"\n                label=\"actions\"\n                items={[\n                  { label: \"Edit\", onClick: () => onEdit(time) },\n                  { label: \"Delete\", onClick: () => onDelete(time) }\n                ]}\n              />\n            </Box>\n          )}\n        </Box>\n      ))}\n    </Box>\n  );\n}\n\nexport default Day;\n","import React, { useState, useEffect } from \"react\";\nimport { Box } from \"grommet\";\nimport Day from \"./Day\";\n\nfunction Entries({ tupelo }) {\n  const [entries, setEntries] = useState([]);\n\n  useEffect(() => {\n    async function getEntries() {\n      const [today] = new Date().toISOString().split(\"T\");\n      let entries = Object.keys(await tupelo.get(\"entries\", {}));\n      console.log(\"getentries\", entries);\n      entries.sort();\n      entries.reverse();\n      if (!entries.includes(today)) {\n        entries = [today, ...entries];\n      }\n      setEntries(entries);\n    }\n    getEntries();\n  }, [tupelo]);\n\n  return (\n    <Box>\n      {entries.map(entry => (\n        <Day\n          key={entry}\n          tupelo={tupelo}\n          date={entry}\n          path={[\"entries\", entry].join(\"/\")}\n        />\n      ))}\n    </Box>\n  );\n}\n\nexport default Entries;\n","import React, { useState, useEffect } from \"react\";\nimport { Box, Button, Form, Icons, FormField, TextInput } from \"grommet\";\nimport db from \"./db\";\n\nconst EXPLORER =\n  \"https://quorumcontrol.github.io/wasm-explorer/build/#/chaintrees/\";\n\nfunction Settings({ tupelo }) {\n  const [did, setDid] = useState(\"\");\n  const [name, setName] = useState(\"\");\n\n  async function onSubmit() {\n    await tupelo.set(\"name\", name);\n  }\n\n  function onLogout() {\n    db.remove(\"tupelo:privateKey\");\n    window.location.reload();\n  }\n\n  useEffect(() => {\n    tupelo.get(\"name\").then(setName);\n    tupelo.tree.id().then(setDid);\n  }, [tupelo]);\n\n  return (\n    <Box>\n      <Box margin={{ top: \"large\" }}>\n        Your DID is:{\" \"}\n        <a target=\"_blank\" href={EXPLORER + did}>\n          {did}\n        </a>\n      </Box>\n\n      <Box margin={{ top: \"large\" }}>\n        <Button label=\"Logout\" onClick={onLogout} />\n      </Box>\n    </Box>\n  );\n}\n\nexport default Settings;\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Box,\n  Button,\n  Form,\n  Icons,\n  FormField,\n  TextInput,\n  Paragraph\n} from \"grommet\";\nimport Tupelo, { login } from \"./tupelo.js\";\n\nfunction Login({ onLogin }) {\n  const history = useHistory();\n  const [isWrongPassword, setIsWrongPassword] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  async function onSubmit() {\n    let key;\n    try {\n      key = await login(username, password);\n      await onLogin(key);\n      history.replace(\"/\");\n    } catch (e) {\n      console.log(\"error\", e);\n      if (e.toString() !== \"wrong password\") {\n        throw e;\n      }\n      setIsWrongPassword(true);\n      setPassword(\"\");\n    }\n  }\n\n  return (\n    <Box pad=\"large\">\n      {isWrongPassword && (\n        <Box background=\"status-error\" align=\"center\">\n          <Paragraph>Wrong Password</Paragraph>\n        </Box>\n      )}\n      <Form onSubmit={onSubmit}>\n        <FormField label=\"Username\">\n          <TextInput\n            value={username}\n            onChange={e => setUsername(e.target.value)}\n          />\n        </FormField>\n        <FormField label=\"Password\">\n          <TextInput\n            type=\"password\"\n            value={password}\n            onChange={e => setPassword(e.target.value)}\n          />\n        </FormField>\n        <Button type=\"submit\" label=\"Login\" />\n      </Form>\n    </Box>\n  );\n}\n\nexport default Login;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Redirect,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport { Box, Grommet } from \"grommet\";\nimport Tupelo, { getKey, loadWasm } from \"./tupelo.js\";\nimport TupeloLoader from \"./TupeloLoader.js\";\nimport AppBar from \"./AppBar.js\";\nimport Header from \"./Header.js\";\nimport Entries from \"./Entries.js\";\nimport Settings from \"./Settings.js\";\nimport Login from \"./Login.js\";\nimport db from \"./db.js\";\n\nconst theme = {\n  global: {\n    font: {\n      family: \"monospace\",\n      size: \"18px\",\n      height: \"20px\"\n    }\n  }\n};\n\nfunction App() {\n  const [loading, setLoading] = useState(\"Loading Tupelo WASM SDK\");\n  const [tupelo, setTupelo] = useState();\n\n  window.tupelo = tupelo;\n\n  useEffect(() => {\n    async function loadTupelo() {\n      await loadWasm();\n      setLoading(\"Connecting to Network\");\n      const privateKey = await getKey();\n      if (privateKey) {\n        const tupelo = await Tupelo.fromKey(privateKey);\n        setTupelo(tupelo);\n      }\n      setLoading(null);\n    }\n    loadTupelo();\n  }, []);\n\n  async function onLogin(key) {\n    const tupelo = await Tupelo.fromKey(key);\n    setTupelo(tupelo);\n  }\n\n  console.log(\"render\", tupelo);\n  if (loading) {\n    return <p>{loading}, please wait...</p>;\n  } else {\n    return (\n      <Grommet theme={theme} full>\n        <Router>\n          <Box align=\"center\">\n            <Box fill>\n              <AppBar />\n            </Box>\n            <Box width=\"large\">\n              <Switch>\n                <PrivateRoute exact path=\"/\" isAuthenticated={tupelo}>\n                  <Header tupelo={tupelo} />\n                  <Entries tupelo={tupelo} />\n                </PrivateRoute>\n                <Route exact path=\"/journal/:username\">\n                  <TupeloLoader>\n                    <Header />\n                    <Entries />\n                  </TupeloLoader>\n                </Route>\n                <PrivateRoute path=\"/settings\" isAuthenticated={tupelo}>\n                  <Settings tupelo={tupelo} />\n                </PrivateRoute>\n                <Route path=\"/login\">\n                  <Login onLogin={onLogin} />\n                </Route>\n              </Switch>\n            </Box>\n          </Box>\n        </Router>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"./set-wasm-path\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 491;","class DB {\n  constructor(storage = localStorage) {\n    this.storage = storage;\n  }\n\n  get(key, fallback) {\n    const value = this.storage.getItem(key);\n    return value === null ? fallback : JSON.parse(value);\n  }\n\n  set(key, valueOrFunction, fallback) {\n    let value;\n    if (valueOrFunction instanceof Function) {\n      const prev = this.get(key, fallback);\n      value = valueOrFunction(prev);\n    } else {\n      value = valueOrFunction;\n    }\n    this.storage.setItem(key, JSON.stringify(value));\n    return value;\n  }\n\n  has(key) {\n    return this.storage[key] !== undefined;\n  }\n\n  remove(key) {\n    this.storage.removeItem(key);\n  }\n}\n\nexport default new DB();\n","import db from \"./db\";\nimport {\n  Community,\n  ChainTree,\n  EcdsaKey,\n  Tupelo,\n  setOwnershipTransaction,\n  setDataTransaction\n} from \"tupelo-wasm-sdk\";\n\nwindow.Tupelo = Tupelo;\nwindow.Community = Community;\nwindow.ChainTree = ChainTree;\nwindow.EcdsaKey = EcdsaKey;\nwindow.setDataTransaction = setDataTransaction;\n\nconst NAMESPACE = \"https://vrde.github.io/apps/tojo\";\n\n// crypto API is only supported by Firefox and Chrome\nasync function sha256(s) {\n  const msgUint8 = Buffer.from(s);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", msgUint8);\n  return new Uint8Array(hashBuffer);\n}\n\nwindow.sha256 = sha256;\n\nexport async function usernameToDid(username) {\n  const community = await Community.getDefault();\n  const claimHash = await sha256([NAMESPACE, username].join(\":\"));\n  const claimKey = await EcdsaKey.fromBytes(claimHash);\n  const claimDid = await Tupelo.ecdsaPubkeyToDid(claimKey.publicKey);\n  try {\n    const claimTip = await community.getTip(claimDid);\n    const currentClaim = new ChainTree({\n      store: community.blockservice,\n      tip: claimTip\n    });\n    return (await currentClaim.resolve(\"/tree/data/owner\")).value;\n  } catch (e) {\n    if (e.toString() !== \"not found\") {\n      throw e;\n    }\n  }\n}\n\nwindow.usernameToDid = usernameToDid;\n\nexport async function loadWasm() {\n  // FIXME: find a better way to trigger Wasm loading\n  await EcdsaKey.generate();\n}\n\nexport async function login(username, password) {\n  const community = await Community.getDefault();\n\n  const claimHash = await sha256([NAMESPACE, username].join(\":\"));\n  const claimKey = await EcdsaKey.fromBytes(claimHash);\n  const claimDid = await Tupelo.ecdsaPubkeyToDid(claimKey.publicKey);\n\n  const userHash = await sha256([NAMESPACE, username, password].join(\":\"));\n  const userKey = await EcdsaKey.fromBytes(userHash);\n  const userAddress = await Tupelo.ecdsaPubkeyToAddress(userKey.publicKey);\n  const userDid = await Tupelo.ecdsaPubkeyToDid(userKey.publicKey);\n\n  let currentOwner;\n\n  try {\n    const claimTip = await community.getTip(claimDid);\n    const currentClaim = new ChainTree({\n      store: community.blockservice,\n      tip: claimTip\n    });\n    currentOwner = (await currentClaim.resolve(\"/tree/data/owner\")).value;\n  } catch (e) {\n    if (e.toString() !== \"not found\") {\n      throw e;\n    }\n  }\n\n  // If the username is free, claim it\n  if (!currentOwner) {\n    const claimTree = await ChainTree.newEmptyTree(\n      community.blockservice,\n      claimKey\n    );\n    await community.playTransactions(claimTree, [\n      setDataTransaction(\"username\", username),\n      setDataTransaction(\"owner\", userDid),\n      setOwnershipTransaction([userAddress])\n    ]);\n    const userTree = await ChainTree.newEmptyTree(\n      community.blockservice,\n      userKey\n    );\n    await community.playTransactions(userTree, [\n      setDataTransaction(\"username\", username),\n      setDataTransaction(\"claim\", claimDid)\n    ]);\n  } else if (currentOwner !== userDid) {\n    throw \"wrong password\";\n  }\n\n  db.set(\"tupelo:privateKey\", Array.from(userKey.privateKey));\n  return userKey;\n}\n\nwindow.login = login;\n\nexport async function getKey() {\n  if (!db.has(\"tupelo:privateKey\")) {\n    return;\n    //const key = await EcdsaKey.generate();\n    //db.set(\"tupelo:privateKey\", Array.from(key.privateKey));\n  }\n  const privateKey = new Uint8Array(db.get(\"tupelo:privateKey\"));\n  return EcdsaKey.fromBytes(privateKey);\n}\n\nexport default class Store {\n  constructor(key, did) {\n    this.key = key;\n    this.did = did;\n  }\n\n  async init() {\n    this.community = await Community.getDefault();\n  }\n\n  static async fromKey(key) {\n    const store = new Store(key);\n    await store.init();\n    const emptyTree = await ChainTree.newEmptyTree(\n      store.community.blockservice,\n      key\n    );\n    const did = await emptyTree.id();\n    try {\n      const tip = await store.community.getTip(did);\n      store.tree = new ChainTree({\n        store: store.community.blockservice,\n        tip,\n        key\n      });\n    } catch (e) {\n      if (e.toString() !== \"not found\") {\n        throw e;\n      }\n      store.tree = emptyTree;\n    }\n    store.did = await store.tree.id();\n    return store;\n  }\n\n  static async fromDID(did) {\n    const store = new Store(null, did);\n    await store.init();\n    store.tree = new ChainTree({\n      store: store.community.blockservice,\n      tip: await store.getTip()\n    });\n    return store;\n  }\n\n  async getTip() {\n    return await this.community.getTip(this.did);\n  }\n\n  async set(path, value) {\n    return await this.community.playTransactions(this.tree, [\n      setDataTransaction(path, value)\n    ]);\n  }\n\n  async get(path, fallback) {\n    const { remaining, value } = await this.tree.resolve(\"/tree/data/\" + path);\n    return value === null ? fallback : value;\n  }\n\n  // doesn't work\n  async delete(path) {\n    return await this.community.playTransactions(this.tree, [\n      setDataTransaction(path, undefined)\n    ]);\n  }\n}\n\nwindow.Store = Store;\n"],"sourceRoot":""}